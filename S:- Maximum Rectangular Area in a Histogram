#include <bits/stdc++.h>
using namespace std;
class Solution
{
    public:
    long long getMaxArea(long long arr[], int n)
    {
        vector<long long> left;
        stack<pair<long long,int>>s1;
        int pseudoindex1=-1;
        for(int i=0;i<n;i++){
            if(s1.size()==0){
                left.push_back(pseudoindex1);
            }else if(s1.size()>0 && s1.top().first<arr[i]){
                left.push_back(s1.top().second);
            }else if(s1.size()>0 && s1.top().first>=arr[i]){
                while(s1.size()>0 && s1.top().first>=arr[i]){
                    s1.pop();
                }
                if(s1.size()==0){
                    left.push_back(pseudoindex1);
                }else{
                    left.push_back(s1.top().second);
                }
            }
            s1.push({arr[i],i});
        }
        vector<long long> right;
        stack<pair<long long,int>>s2;
        int pseudoindex2=n;
        for(int i=n-1;i>=0;i--){
            if(s2.size()==0){
                right.push_back(pseudoindex2);
            }else if(s2.size()>0 && s2.top().first<arr[i]){
                right.push_back(s2.top().second);
            }else if(s2.size()>0 && s2.top().first>=arr[i]){
                while(s2.size()>0 && s2.top().first>=arr[i]){
                    s2.pop();
                }
                if(s2.size()==0){
                    right.push_back(pseudoindex2);
                }else{
                    right.push_back(s2.top().second);
                }
            }
            s2.push({arr[i],i});
        }
        reverse(right.begin(),right.end());
        vector<long long>ans;
        for(int i=0;i<n;i++){
            long long x=(right[i]-left[i]-1)*arr[i];
            ans.push_back(x);
        }
        sort(ans.begin(),ans.end());
        return ans[n-1];
    }
};


// { Driver Code Starts.

int main()
 {
    long long t;

    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        
        long long arr[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        Solution ob;
        cout<<ob.getMaxArea(arr, n)<<endl;
    
    }
	return 0;
}
